[{"name":"app.R","content":"library(shiny)\nsource(file.path(\"R\", \"convert.R\"))\n\nui <- fluidPage(\n  titlePanel(\"Govspeakify Tables\"),\n  HTML(\"<p>This is a minimal proof-of-concept Shinylive app. Find the source <a href='https://github.com/matt-dray/govspeakify-tables'>on GitHub<\/a>. Read more in <a href='https://www.rostrum.blog/posts/2023-06-21-wordup-tables/'>a related blog post<\/a>.<\/p>\"),\n  HTML(\"<p><details><summary>Click here for an example table to copy.<\/summary><table><tr><td>Column 1<\/td><td>Column 2<\/td><td>Column 3<\/td><td>Column 4<\/td><td>Column 5<\/td><\/tr><tr><td>X<\/td><td>100<\/td><td>1,000<\/td><td>1%<\/td><td>15<\/td><\/tr><tr><td>Y<\/td><td>200<\/td><td>2,000<\/td><td>2%<\/td><td>12<\/td><\/tr><tr><td>Z<\/td><td>300<\/td><td>3,000<\/td><td>3%<\/td><td>[c]<\/td><\/tr><tr><td>Totals<\/td><td>600<\/td><td>6,000<\/td><td>6%<\/td><td>[c]<\/td><\/tr><\/table><\/details><\/p>\"),\n  p(),\n  textAreaInput(\"text_in\", NULL, placeholder = \"Paste a Word table\"), \n  actionButton(\"button_convert\", \"Convert to Govspeak\", icon(\"table-cells\")), \n  verbatimTextOutput(\"text_out\")\n)\n\nserver <- function(input, output, session) {\n  \n  govspeakify_reactive <- eventReactive(\n    input$button_convert,\n    { table_to_govspeak(input$text_in) }\n  )\n  \n  output$text_out <- renderText({ govspeakify_reactive() }, sep = \"\\n\") \n  \n}\n\nshinyApp(ui = ui, server = server)\n\n\n","type":"text"},{"name":"DESCRIPTION","content":"Title: Govspeakify Tables\nAuthor: Matt Dray\nAuthorUrl: http://www.matt-dray.com\nLicense: MIT\nType: Shiny\n","type":"text"},{"name":"R/convert.R","content":"# Function adapted from {wordup}: https://github.com/matt-dray/wordup\ntable_to_govspeak <- function(\n    pasted_table = NULL,\n    guess_types = TRUE,\n    ignore_regex = \",|%|\\\\[.\\\\]\",\n    has_row_titles = FALSE,\n    totals_rows = NULL\n) {\n  \n  if (!is.null(pasted_table)) {\n    rows <- strsplit(pasted_table, \"\\n\")[[1]]\n  }\n  \n  cells <- lapply(rows, \\(x) trimws(strsplit(x, \"\\t\")[[1]]))\n  dat <- do.call(\"rbind\", cells[-1]) |> as.data.frame()\n  names(dat) <- cells[[1]]\n  \n  if (!guess_types) {\n    dat <- rbind(rep(\"-------\", length(dat)), dat)\n  }\n  \n  if (guess_types) {\n    \n    are_cols_num <- lapply(dat, \\(x) gsub(ignore_regex, \"\", x)) |>\n      utils::type.convert(as.is = TRUE) |>\n      lapply(is.numeric)\n    \n    for (i in seq_along(are_cols_num)) {\n      \n      if (are_cols_num[[i]]) {\n        are_cols_num[[i]] <- \"------:\"\n      } else {\n        are_cols_num[[i]] <- \"-------\"\n      }\n      \n    }\n    \n    dat <- rbind(are_cols_num, dat)\n    \n  }\n  \n  if (!is.null(totals_rows)) {\n    for (row in totals_rows) {\n      dat[row + 1, ] <- paste0(\"**\", dat[row + 1, ], \"**\")\n    }\n  }\n  \n  if (has_row_titles) {\n    dat[2:nrow(dat), 1] <- paste(\"#\", dat[2:nrow(dat), 1] )\n  }\n  \n  vec <- character(length = nrow(dat) + 1)\n  for (row in 1:nrow(dat)) {\n    row_pasted <- paste0(\"| \", paste0(dat[row, ], collapse = \" | \"), \" |\")\n    vec[row + 1] <- row_pasted\n  }\n  vec[1] <- paste0(\"| \", paste0(names(dat), collapse = \" | \"), \" |\")\n  \n  return(vec)\n  \n}","type":"text"}]
