[{"name":"app.R","content":"library(shiny)\nlibrary(rclipboard)\nsource(file.path(\"R\", \"convert.R\"))\n\nui <- fluidPage(\n  \n  titlePanel(\"Govspeakify Tables\"),\n  title = \"Govspeakify Tables\",\n  \n  rclipboardSetup(),\n  \n  # Explanation\n  HTML(\"<p>This is a minimal proof-of-concept Shinylive app. Find the source <a href='https://github.com/matt-dray/govspeakify-tables'>on GitHub<\/a>. Read more in <a href='https://www.rostrum.blog/posts/2023-06-21-wordup-tables/'>a related blog post<\/a>.<\/p>\"),\n  \n  # Expandable section: demo table\n  HTML(\"<p><details><summary>Click here for an example table to copy.<\/summary>\"),\n  tableOutput(\"example_table\"),\n  HTML(\"<\/details><\/p>\"),\n  \n  # Area to paste table\n  textAreaInput(\"text_in\", NULL, placeholder = \"Paste a Word table\"),\n  \n  # Expandable section: Govspeak table style options\n  HTML(\"<p><details><summary>Click here for table options.<\/summary>\"),\n  checkboxInput(\"checkbox_row_titles\", \"Table has row titles (i.e. the first column contains headers)\", value = FALSE, width = \"100%\"),\n  p(\"Provide the numeric values for rows that contain totals (comma separated):\"),\n  textInput(\"text_row_totals\", NULL, placeholder = \"4\"),\n  p(\"Provide a regular expression for characters to ignore when evaluating numeric columns:\"),\n  textInput(\"text_regex\", NULL, value = \",|%|\\\\[.\\\\]\"),\n  HTML(\"<\/details><\/p>\"),\n  p(),\n  \n  # Click button, receive output\n  actionButton(\"button_convert\", \"Convert to Govspeak\", icon(\"table-cells\")), \n  verbatimTextOutput(\"text_out\"),\n  uiOutput(\"button_clip\")\n  \n)\n\nserver <- function(input, output, session) {\n  \n  # Create a demo table that user can copy as an example\n  output$example_table <- renderTable(\n    data.frame(\n      ColA = c(\"X\", \"Y\", \"Z\", \"Totals\"),\n      ColB = c(100, 200, 300, 600),\n      ColC = c(\"1,000\", \"2,000\", \"3,000\", \"6,000\"),\n      ColD = c(\"1%\", \"2%\", \"3%\", \"6%\"),\n      ColE = c(\"15\", \"[z]\", \"[c]\", \"[c]\")\n    )\n  )\n  \n  # Run conversion function when button is clicked\n  govspeakify_reactive <- eventReactive(\n    input$button_convert,\n    { table_to_govspeak(\n      pasted_table   = input$text_in,\n      ignore_regex   = input$text_regex,\n      has_row_titles = input$checkbox_row_titles,\n      totals_rows    = str2num(input$text_row_totals)\n    ) }\n  )\n  \n  # Render rows of the table, breaking each onto a separate line\n  output$text_out <- renderText({ govspeakify_reactive() }, sep = \"\\n\") \n  \n  # Copy button to be rendered only after the 'convert' button has been clicked\n  rclipButton_reactive <- eventReactive(\n    input$button_convert,\n    { rclipButton(\n      inputId = \"clipbtn\", \n      label = \"Copy\", \n      clipText = { paste(\n        table_to_govspeak(\n          pasted_table   = input$text_in,\n          ignore_regex   = input$text_regex,\n          has_row_titles = input$checkbox_row_titles,\n          totals_rows    = str2num(input$text_row_totals)\n        ), \n        collapse = \"\\n\"\n      ) }, \n      icon = icon(\"copy\")\n    ) }\n  )\n  \n  # Generate the 'copy' button\n  output$button_clip <- renderUI({ rclipButton_reactive() }) \n  \n}\n\nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"DESCRIPTION","content":"Title: Govspeakify Tables\nAuthor: Matt Dray\nAuthorUrl: http://www.matt-dray.com\nLicense: MIT\nType: Shiny\n","type":"text"},{"name":"R/convert.R","content":"# Function adapted from {wordup}: https://github.com/matt-dray/wordup\ntable_to_govspeak <- function(\n    pasted_table = NULL,\n    guess_types = TRUE,\n    ignore_regex = \",|%|\\\\[.\\\\]\",\n    has_row_titles = FALSE,\n    totals_rows = NULL\n) {\n  \n  if (!is.null(pasted_table)) {\n    rows <- strsplit(pasted_table, \"\\n\")[[1]]\n  }\n  \n  cells <- lapply(rows, \\(x) trimws(strsplit(x, \"\\t\")[[1]]))\n  dat <- do.call(\"rbind\", cells[-1]) |> as.data.frame()\n  names(dat) <- cells[[1]]\n  \n  if (!guess_types) {\n    dat <- rbind(rep(\"-------\", length(dat)), dat)\n  }\n  \n  if (guess_types) {\n    \n    are_cols_num <- lapply(dat, \\(x) gsub(ignore_regex, \"\", x)) |>\n      utils::type.convert(as.is = TRUE) |>\n      lapply(is.numeric)\n    \n    for (i in seq_along(are_cols_num)) {\n      \n      if (are_cols_num[[i]]) {\n        are_cols_num[[i]] <- \"------:\"\n      } else {\n        are_cols_num[[i]] <- \"-------\"\n      }\n      \n    }\n    \n    dat <- rbind(are_cols_num, dat)\n    \n  }\n  \n  if (!is.null(totals_rows)) {\n    for (row in totals_rows) {\n      dat[row + 1, ] <- paste0(\"**\", dat[row + 1, ], \"**\")\n    }\n  }\n  \n  if (has_row_titles) {\n    dat[2:nrow(dat), 1] <- paste(\"#\", dat[2:nrow(dat), 1] )\n  }\n  \n  vec <- character(length = nrow(dat) + 1)\n  for (row in 1:nrow(dat)) {\n    row_pasted <- paste0(\"| \", paste0(dat[row, ], collapse = \" | \"), \" |\")\n    vec[row + 1] <- row_pasted\n  }\n  vec[1] <- paste0(\"| \", paste0(names(dat), collapse = \" | \"), \" |\")\n  \n  return(vec)\n  \n}\n\n# Accept a string of comma-separated numbers for rows that contain totals\nstr2num <- function(string) {\n  string <- gsub(\" \", \"\", string)\n  as.numeric(strsplit(string, \",\")[[1]])\n}","type":"text"}]
